import time
from typing import Tuple
import torch
import sys
## Adding PyGRANSO directories. Should be modified by user
sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')
from pygranso.pygranso import pygranso
from pygranso.pygransoStruct import pygransoStruct
from torch.linalg import norm
from scipy.stats import ortho_group
import numpy as np
from matplotlib import pyplot as plt 
import os
from datetime import datetime

class pythonStruct():
    pass

###############################################
write_to_log = True

n = 30 # V: n*d
d = 15 # copnst: d*d

folding_list = ['l2','l1','linf']
# folding_list = ['l2','l1']
# folding_list = ['l2','l1','linf','unfolding']

total = 200 # total number of starting points
feasible_init = False
opt_tol = 1e-6
maxit = 50000
maxclocktime = 60
# QPsolver = "gurobi"
QPsolver = "osqp"

# square_flag = True
square_flag = False

mu0 = 0.1
device = torch.device('cuda')
###############################################

if square_flag:
    square_str = "square_"
else:
    square_str = ""

maxfolding = ''
for str in folding_list:
    maxfolding = maxfolding + str + '_'

# save file
now = datetime.now() # current date and time
date_time = now.strftime("%m%d%Y_%H:%M:%S")

my_path = os.path.dirname(os.path.abspath(__file__))

if feasible_init:
    feasible = "feasible_init"
else:
    feasible = "gaussnormal_init"

name_str = "_n{}_d{}_{}_{}{}_total{}_maxtime{}".format(n,d,feasible,square_str,maxfolding,total,maxclocktime)





###################################################
torch.manual_seed(2023)
np.random.seed(2023)

A = torch.randn(n,n)
A = (A + A.T)/2
# All the user-provided data (vector/matrix/tensor) must be in torch tensor format.
# As PyTorch tensor is single precision by default, one must explicitly set `dtype=torch.double`.
# Also, please make sure the device of provided torch tensor is the same as opts.torch_device.
A = A.to(device=device, dtype=torch.double)

L, U = torch.linalg.eig(A)
L = L.to(dtype=torch.double)
U = U.to(dtype=torch.double)
index = torch.argsort(L,descending=True)
U = U[:,index[0:d]]

# variables and corresponding dimensions.
var_in = {"V": [n,d]}

#generate a list of markers and another of colors 
markers = [ "," , "o" , "v" , "^" , "<", ">", "." ]
colors = ['r','g','b','c','m', 'y', 'k']


all_lst = pythonStruct()
all_lst.l2 = np.array([-47.05555357 ,-47.67536724 ,-47.82399953 ,-47.87410843 ,-47.97721124
 ,-48.03496835 ,-48.14443206 ,-48.16185902 ,-48.24044024 ,-48.40329648
 ,-48.40404402 ,-48.42462406 ,-48.4392666  ,-48.45434677 ,-48.46107629
 ,-48.4664057  ,-48.48736622 ,-48.49270514 ,-48.50204519 ,-48.51720486
 ,-48.52558351 ,-48.5888092  ,-48.68012255 ,-48.69171959 ,-48.69723729
 ,-48.71927751 ,-48.75498759 ,-48.75971407 ,-48.76641743 ,-48.78174196
 ,-48.79073922 ,-48.82807449 ,-48.82925843 ,-48.85185623 ,-48.8606413
 ,-48.86670198 ,-48.89803439 ,-48.93225297 ,-48.93460195 ,-48.95039413
 ,-48.96250744 ,-48.97234506 ,-48.97261206 ,-48.9799329  ,-48.98373391
 ,-48.98403181 ,-48.99112533 ,-48.99181905 ,-48.99621731 ,-49.01357719
 ,-49.01444542 ,-49.01514518 ,-49.03175652 ,-49.03306415 ,-49.03450758
 ,-49.03612805 ,-49.04378956 ,-49.04644958 ,-49.04653399 ,-49.07217468
 ,-49.07476512 ,-49.08469714 ,-49.08710438 ,-49.09455687 ,-49.09865675
 ,-49.10043152 ,-49.11294804 ,-49.11997822 ,-49.12667891 ,-49.12933869
 ,-49.13113373 ,-49.13283274 ,-49.13741238 ,-49.1378747  ,-49.13848352
 ,-49.14023396 ,-49.1413325  ,-49.14173684 ,-49.14731722 ,-49.15176702
 ,-49.15263899 ,-49.15289129 ,-49.15470831 ,-49.15633258 ,-49.15864447
 ,-49.16111662 ,-49.16192669 ,-49.16276395 ,-49.16414056 ,-49.16596622
 ,-49.16626211 ,-49.16887182 ,-49.16912709 ,-49.1691719  ,-49.16978322
 ,-49.16992115 ,-49.17247068 ,-49.17699319 ,-49.17886733 ,-49.18051792
 ,-49.18639461 ,-49.18717397 ,-49.19152781 ,-49.19365615 ,-49.19496205
 ,-49.19558255 ,-49.19965323 ,-49.20261153 ,-49.20489998 ,-49.20578082
 ,-49.20675585 ,-49.20773613 ,-49.20909871 ,-49.20936153 ,-49.20944409
 ,-49.21030366 ,-49.21291707 ,-49.21431675 ,-49.21628712 ,-49.21706816
 ,-49.22007937 ,-49.22058803 ,-49.22067114 ,-49.22145821 ,-49.22349736
 ,-49.22384721 ,-49.22424669 ,-49.2242774  ,-49.22501925 ,-49.22563143
 ,-49.22633187 ,-49.22757139 ,-49.22790667 ,-49.22803938 ,-49.22818797
 ,-49.22835955 ,-49.22840958 ,-49.22929568 ,-49.23094091 ,-49.23157529
 ,-49.23277658 ,-49.23328382 ,-49.23446302 ,-49.23617483 ,-49.23644596
 ,-49.23672072 ,-49.23737897 ,-49.23945669 ,-49.24388818 ,-49.24501681
 ,-49.24509164 ,-49.24571202 ,-49.24572912 ,-49.24842889 ,-49.25455594
 ,-49.25943922 ,-49.26110303 ,-49.26188742 ,-49.31314377  ])

all_lst.l1 = np.array([-43.63040906 ,-45.59871935 ,-45.71163148 ,-45.97170838 ,-46.04499136
 ,-46.38488988 ,-46.68068112 ,-46.79464572 ,-46.8512164  ,-46.87312973
 ,-46.95717449 ,-47.10085543 ,-47.1056041  ,-47.14968653 ,-47.19371099
 ,-47.3294397  ,-47.32954232 ,-47.39857686 ,-47.46050366 ,-47.46207914
 ,-47.46956818 ,-47.48631677 ,-47.50835722 ,-47.54605709 ,-47.5801418
 ,-47.58320192 ,-47.61771721 ,-47.62619255 ,-47.63358226 ,-47.63414447
 ,-47.66708907 ,-47.68554329 ,-47.71235664 ,-47.71487868 ,-47.72366158
 ,-47.74769647 ,-47.80776591 ,-47.8282811  ,-47.84153525 ,-47.87373096
 ,-47.87386594 ,-47.87729788 ,-47.90626856 ,-47.90944918 ,-48.01654526
 ,-48.03728895 ,-48.05041587 ,-48.05442475 ,-48.11933849 ,-48.12037037
 ,-48.12534893 ,-48.12701895 ,-48.13497411 ,-48.15542647 ,-48.16576384
 ,-48.16843686 ,-48.188616   ,-48.18896528 ,-48.20027778 ,-48.2011085
 ,-48.20589182 ,-48.21010159 ,-48.21660996 ,-48.21703428 ,-48.23152176
 ,-48.25809106 ,-48.26663055 ,-48.2709234  ,-48.2729578  ,-48.28427123
 ,-48.28947496 ,-48.29408422 ,-48.29427876 ,-48.29446457 ,-48.29462513
 ,-48.29657297 ,-48.31314696 ,-48.31432694 ,-48.32174123 ,-48.3225649
 ,-48.32356507 ,-48.34022735 ,-48.3445781  ,-48.35216206 ,-48.36054706
 ,-48.3740907  ,-48.37509741 ,-48.38668435 ,-48.39537145 ,-48.39741037
 ,-48.40199258 ,-48.40243868 ,-48.41926479 ,-48.42833111 ,-48.43497904
 ,-48.43546005 ,-48.43759382 ,-48.43917237 ,-48.4418198  ,-48.46347835
 ,-48.46573624 ,-48.47405656 ,-48.48208823 ,-48.49498285 ,-48.51104209
 ,-48.51456492 ,-48.52461002 ,-48.53465451 ,-48.54343516 ,-48.55459413
 ,-48.55650572 ,-48.55810923 ,-48.57066985 ,-48.57263682 ,-48.59968171
 ,-48.60177493 ,-48.6112567  ,-48.61966709 ,-48.63747071 ,-48.63848337
 ,-48.63947787 ,-48.68405223 ,-48.6862086  ,-48.68906686 ,-48.69126722
 ,-48.69582496 ,-48.72144597 ,-48.7216909  ,-48.723743   ,-48.72672843
 ,-48.73921077 ,-48.74435102 ,-48.74507298 ,-48.76962191 ,-48.77150714
 ,-48.78202409 ,-48.78867707 ,-48.80709621 ,-48.81379147 ,-48.81480918
 ,-48.82245602 ,-48.85084484 ,-48.85677562 ,-48.87024297 ,-48.87509152
 ,-48.8759421  ,-48.88133613 ,-48.88397193 ,-48.88602736 ,-48.89048625
 ,-48.89208876 ,-48.91238923 ,-48.93005543 ,-48.93298435 ,-48.94128282
 ,-48.94937912 ,-48.95260602 ,-48.95840504 ,-48.96559693 ,-48.97556629
 ,-48.98728846 ,-48.99026351 ,-48.99097461 ,-48.99202671 ,-48.99541112
 ,-48.99759708 ,-48.99881523 ,-48.99916902 ,-49.00568108 ,-49.00812698
 ,-49.01658658 ,-49.03115784 ,-49.03158922 ,-49.03740533 ,-49.03896831
 ,-49.04023472 ,-49.04212196 ,-49.04685254 ,-49.04755022 ,-49.05285948
 ,-49.05769783 ,-49.05945169 ,-49.06750007 ,-49.06781021 ,-49.07386892
 ,-49.09227372 ,-49.09291277 ,-49.09642789 ,-49.13265708 ,-49.13547023
 ,-49.14150334 ,-49.14332369 ,-49.15714124 ,-49.15943379 ,-49.16267821])

all_lst.linf = np.array([-46.66835719 ,-47.12783122 ,-47.16918116 ,-47.43161708 ,-47.60564162
 ,-47.6693003  ,-47.67379451 ,-47.68665994 ,-47.69676966 ,-47.70117779
 ,-47.70624471 ,-47.73767356 ,-47.76098088 ,-47.8664565  ,-47.93118957
 ,-47.96324118 ,-47.99043706 ,-48.00809401 ,-48.01330496 ,-48.03718265
 ,-48.0375502  ,-48.04058801 ,-48.04857515 ,-48.0633472  ,-48.09701707
 ,-48.11628882 ,-48.16069488 ,-48.16667479 ,-48.17843264 ,-48.18537383
 ,-48.1936608  ,-48.21044088 ,-48.22362287 ,-48.23504292 ,-48.2362555
 ,-48.23632444 ,-48.26527073 ,-48.27666056 ,-48.30027396 ,-48.30376841
 ,-48.32206933 ,-48.32371162 ,-48.32838277 ,-48.33458955 ,-48.33600172
 ,-48.3446549  ,-48.35838861 ,-48.36533606 ,-48.36894605 ,-48.37481276
 ,-48.37540767 ,-48.3829955  ,-48.40816128 ,-48.41504059 ,-48.44578083
 ,-48.46003743 ,-48.46492433 ,-48.47141024 ,-48.47682317 ,-48.47915688
 ,-48.48510582 ,-48.48851945 ,-48.4965267  ,-48.50451076 ,-48.5066372
 ,-48.5378936  ,-48.53939517 ,-48.54644417 ,-48.54846254 ,-48.55139614
 ,-48.55278511 ,-48.55535596 ,-48.55827083 ,-48.56186032 ,-48.56247856
 ,-48.56340006 ,-48.56572027 ,-48.56596898 ,-48.56810133 ,-48.57072532
 ,-48.57614895 ,-48.58213384 ,-48.59501009 ,-48.61121001 ,-48.62242783
 ,-48.63253048 ,-48.64362975 ,-48.64704124 ,-48.6617337  ,-48.67570965
 ,-48.67895735 ,-48.69411911 ,-48.69988205 ,-48.71361815 ,-48.72560022
 ,-48.72703001 ,-48.72904877 ,-48.73304046 ,-48.73361151 ,-48.73549339
 ,-48.78265911 ,-48.79565505 ,-48.79814505 ,-48.80009312 ,-48.80136544
 ,-48.80375383 ,-48.80779402 ,-48.81195093 ,-48.81905989 ,-48.82667799
 ,-48.82810512 ,-48.82839946 ,-48.83325231 ,-48.83356846 ,-48.83542804
 ,-48.83624351 ,-48.84299577 ,-48.85449689 ,-48.85752445 ,-48.86097192
 ,-48.8636059  ,-48.87353749 ,-48.87651689 ,-48.87679096 ,-48.87985156
 ,-48.88682905 ,-48.88727136 ,-48.88780572 ,-48.88905511 ,-48.89836485
 ,-48.90374486 ,-48.90637587 ,-48.91009653 ,-48.91063019 ,-48.91423686
 ,-48.9206106  ,-48.92787922 ,-48.94647891 ,-48.96713506 ,-48.97098151
 ,-48.97227214 ,-48.97303915 ,-48.97971498 ,-48.98017413 ,-48.98127506
 ,-48.98511025 ,-48.98715998 ,-48.99193342 ,-48.99481935 ,-49.00048199
 ,-49.00167041 ,-49.01947823 ,-49.02364168 ,-49.02681919 ,-49.02750663
 ,-49.03904876 ,-49.04268172 ,-49.04292224 ,-49.04774335 ,-49.05180436
 ,-49.05331666 ,-49.05379164 ,-49.06218261 ,-49.06235611 ,-49.0678513
 ,-49.06941284 ,-49.07776233 ,-49.08348051 ,-49.08839421 ,-49.08896707
 ,-49.08899728 ,-49.09553309 ,-49.10266922 ,-49.10678342 ,-49.10900045
 ,-49.11040082 ,-49.1120668  ,-49.11838083 ,-49.11962477 ,-49.12469108
 ,-49.12988637 ,-49.13071971 ,-49.136083   ,-49.13825492 ,-49.13978886
 ,-49.14288434 ,-49.14362577 ,-49.14408413 ,-49.14523867 ,-49.15194104
 ,-49.15301275 ,-49.15380665 ,-49.16355458 ,-49.16702662 ,-49.17042897
 ,-49.17263859 ,-49.18044375 ,-49.19572554 ,-49.20206387 ,-49.22263836])
 


idx = 0 # index for plots
for maxfolding in folding_list:
    print('\n\n\n'+maxfolding + '  start!')
    idx+=1

    F_lst = getattr(all_lst,maxfolding) 

    sorted_F = np.array(F_lst)
  
    arr_len = sorted_F.shape[0]
    plt.plot(np.arange(arr_len),sorted_F,color = colors[idx], marker = markers[idx], linestyle = '-',label=maxfolding)
    # plt.plot(np.arange(arr_len),sorted_MF,'go-',label='sorted_pygranso_sol_MF')

ana_sol = torch.trace(U.T@A@U).item()
plt.plot(np.arange(arr_len),np.array(arr_len*[-ana_sol]),color = colors[idx+1], linestyle = '-',label='analytical_sol')
plt.legend()

# plt.show()


png_title =  "png/generated_" + date_time + name_str


plt.title(name_str)
plt.xlabel('sorted sample index')
plt.ylabel('obj_val')
plt.savefig(os.path.join(my_path, png_title))