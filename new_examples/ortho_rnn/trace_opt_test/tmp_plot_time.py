import time
from typing import Tuple
import torch
import sys
## Adding PyGRANSO directories. Should be modified by user
sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')
from pygranso.pygranso import pygranso
from pygranso.pygransoStruct import pygransoStruct
from torch.linalg import norm
from scipy.stats import ortho_group
import numpy as np
from matplotlib import pyplot as plt 
import os
from datetime import datetime

class pythonStruct():
    pass

###############################################
write_to_log = True

n = 30 # V: n*d
d = 15 # copnst: d*d

time_list = ['t60','t120','t240']

total = 165 # total number of starting points
feasible_init = False
opt_tol = 1e-6
maxit = 50000
maxclocktime = 60
# QPsolver = "gurobi"
QPsolver = "osqp"

# square_flag = True
square_flag = False

mu0 = 0.1
device = torch.device('cuda')
###############################################

if square_flag:
    square_str = "square_"
else:
    square_str = ""

maxtime = ''
for str in  time_list:
     maxtime =  maxtime + str + '_'

# save file
now = datetime.now() # current date and time
date_time = now.strftime("%m%d%Y_%H:%M:%S")

my_path = os.path.dirname(os.path.abspath(__file__))

if feasible_init:
    feasible = "feasible_init"
else:
    feasible = "gaussnormal_init"

name_str = "_n{}_d{}_{}_{}{}_total{}_maxtime{}".format(n,d,feasible,square_str, maxtime,total,maxclocktime)





###################################################
torch.manual_seed(2023)
np.random.seed(2023)

A = torch.randn(n,n)
A = (A + A.T)/2
# All the user-provided data (vector/matrix/tensor) must be in torch tensor format.
# As PyTorch tensor is single precision by default, one must explicitly set `dtype=torch.double`.
# Also, please make sure the device of provided torch tensor is the same as opts.torch_device.
A = A.to(device=device, dtype=torch.double)

L, U = torch.linalg.eig(A)
L = L.to(dtype=torch.double)
U = U.to(dtype=torch.double)
index = torch.argsort(L,descending=True)
U = U[:,index[0:d]]

# variables and corresponding dimensions.
var_in = {"V": [n,d]}

#generate a list of markers and another of colors 
markers = [ "," , "o" , "v" , "^" , "<", ">", "." ]
colors = ['r','g','b','c','m', 'y', 'k']


all_lst = pythonStruct()

# all_lst.t60 = np.array([-48.57328584 ,-48.63829984 ,-48.76222003 ,-48.8709976  ,-48.88183083
#  ,-48.91276423 ,-48.92590627 ,-48.94476457 ,-48.94508573 ,-49.0154504
#  ,-49.05973262 ,-49.07862939 ,-49.09186937 ,-49.09710145 ,-49.13081113
#  ,-49.13801762 ,-49.13819032 ,-49.16216899 ,-49.16309668 ,-49.16725628
#  ,-49.17193836 ,-49.1730447  ,-49.17769823 ,-49.1841147  ,-49.18768322
#  ,-49.19118963 ,-49.19125967 ,-49.19349743 ,-49.19509182 ,-49.19755804
#  ,-49.20187318 ,-49.20658685 ,-49.20711219 ,-49.20775412 ,-49.2097587
#  ,-49.21527139 ,-49.21843542 ,-49.22017701 ,-49.22163554 ,-49.22274055
#  ,-49.2239881  ,-49.22643972 ,-49.22960492 ,-49.23254533 ,-49.23729389
#  ,-49.23906571 ,-49.24699682 ,-49.24743387 ,-49.2496674  ,-49.2515924
#  ,-49.25544802 ,-49.25628916 ,-49.25691741 ,-49.25766484 ,-49.26214395
#  ,-49.26288447 ,-49.26325738 ,-49.26706184 ,-49.27155905 ,-49.27190012
#  ,-49.27522322 ,-49.2761587  ,-49.27764526 ,-49.28092226 ,-49.28437236
#  ,-49.28713382 ,-49.28732505 ,-49.28822367 ,-49.28942661 ,-49.29075039
#  ,-49.29399809 ,-49.29767149 ,-49.29976417 ,-49.30672202 ,-49.30825658
#  ,-49.31152402 ,-49.31316855 ,-49.31784801 ,-49.31901489 ,-49.32654146
#  ,-49.34123454 ,-49.34237049 ,-49.35034963 ,-49.35443991 ,-49.35582674
#  ,-49.36483005 ,-49.3700402  ,-49.43164676 ,-49.45079387 ,-49.48413214
#  ,-49.50665158 ,-49.52698699 ,-49.55695829 ,-49.5892577  ,-49.63974133
#  ,-49.87906877 ,-49.98696861 ,-51.13589526 ,-51.93472733 ,-52.15422228])

# all_lst.t120 = np.array([-48.5180888  ,-48.58996456 ,-48.62926482 ,-48.67239489 ,-48.73264218
#  ,-48.82177596 ,-48.82219431 ,-48.83479522 ,-48.94350226 ,-48.96307475
#  ,-48.98247436 ,-48.98454354 ,-49.00586561 ,-49.02078473 ,-49.05048942
#  ,-49.05900992 ,-49.06083192 ,-49.07480065 ,-49.10215039 ,-49.11796407
#  ,-49.11824028 ,-49.14846086 ,-49.14984757 ,-49.15341246 ,-49.15526352
#  ,-49.16329682 ,-49.17808766 ,-49.18505425 ,-49.18536084 ,-49.19415369
#  ,-49.19569849 ,-49.20777668 ,-49.20859193 ,-49.21221683 ,-49.21288892
#  ,-49.22222457 ,-49.22967671 ,-49.23149548 ,-49.23252609 ,-49.23303885
#  ,-49.23310142 ,-49.23408922 ,-49.23544958 ,-49.23621048 ,-49.23743542
#  ,-49.23977609 ,-49.24054127 ,-49.24278832 ,-49.24306386 ,-49.2444808
#  ,-49.24505203 ,-49.2495258  ,-49.25017341 ,-49.25166205 ,-49.25247562
#  ,-49.25980739 ,-49.26016687 ,-49.26109351 ,-49.26243367 ,-49.26244789
#  ,-49.26257383 ,-49.26332197 ,-49.26373301 ,-49.26377022 ,-49.26426832
#  ,-49.26434393 ,-49.26440733 ,-49.26710303 ,-49.26771047 ,-49.2677391
#  ,-49.26932438 ,-49.2712892  ,-49.2719244  ,-49.27228472 ,-49.27405964
#  ,-49.27456329 ,-49.27555301 ,-49.27732823 ,-49.27738207 ,-49.27770472
#  ,-49.2783064  ,-49.2784579  ,-49.27855935 ,-49.27857759 ,-49.2816134
#  ,-49.28432732 ,-49.28478523 ,-49.28765172 ,-49.28796735 ,-49.28867421
#  ,-49.29145152 ,-49.29340686 ,-49.29771691 ,-49.30324277 ,-49.30465317
#  ,-49.30672072 ,-49.30689615 ,-49.3083786  ,-49.31518712 ,-49.32387354])

# all_lst.t240 = np.array([-48.88863258 ,-48.90297247 ,-48.91049982 ,-48.97275557 ,-49.10413947
#  ,-49.11314172 ,-49.13032189 ,-49.13820976 ,-49.1714828  ,-49.17833659
#  ,-49.18405594 ,-49.22614008 ,-49.23708049 ,-49.25551906 ,-49.25700282
#  ,-49.25862421 ,-49.26292352 ,-49.26688078 ,-49.26704301 ,-49.26901415
#  ,-49.27332976 ,-49.27470797 ,-49.27622461 ,-49.27624774 ,-49.27627569
#  ,-49.27645901 ,-49.27728109 ,-49.27905429 ,-49.28014374 ,-49.28048834
#  ,-49.28051029 ,-49.28057139 ,-49.28076948 ,-49.28221515 ,-49.28275274
#  ,-49.28329921 ,-49.2833577  ,-49.28342929 ,-49.28365773 ,-49.28383488
#  ,-49.2840891  ,-49.28685132 ,-49.28745396 ,-49.28785375 ,-49.29180204
#  ,-49.29582445 ,-49.29646276 ,-49.29765275 ,-49.30935102 ,-49.31284663])


all_lst.t60 = np.array([-47.05555357 ,-47.67536724 ,-47.82399953 ,-47.87410843 ,-47.97721124
 ,-48.03496835 ,-48.14443206 ,-48.16185902 ,-48.24044024 ,-48.40329648
 ,-48.40404402 ,-48.42462406 ,-48.4392666  ,-48.45434677 ,-48.46107629
 ,-48.4664057  ,-48.48736622 ,-48.49270514 ,-48.50204519 ,-48.51720486
 ,-48.52558351 ,-48.5888092  ,-48.68012255 ,-48.69171959 ,-48.69723729
 ,-48.71927751 ,-48.75498759 ,-48.75971407 ,-48.76641743 ,-48.78174196
 ,-48.79073922 ,-48.82807449 ,-48.82925843 ,-48.85185623 ,-48.8606413
 ,-48.86670198 ,-48.89803439 ,-48.93225297 ,-48.93460195 ,-48.95039413
 ,-48.96250744 ,-48.97234506 ,-48.97261206 ,-48.9799329  ,-48.98373391
 ,-48.98403181 ,-48.99112533 ,-48.99181905 ,-48.99621731 ,-49.01357719
 ,-49.01444542 ,-49.01514518 ,-49.03175652 ,-49.03306415 ,-49.03450758
 ,-49.03612805 ,-49.04378956 ,-49.04644958 ,-49.04653399 ,-49.07217468
 ,-49.07476512 ,-49.08469714 ,-49.08710438 ,-49.09455687 ,-49.09865675
 ,-49.10043152 ,-49.11294804 ,-49.11997822 ,-49.12667891 ,-49.12933869
 ,-49.13113373 ,-49.13283274 ,-49.13741238 ,-49.1378747  ,-49.13848352
 ,-49.14023396 ,-49.1413325  ,-49.14173684 ,-49.14731722 ,-49.15176702
 ,-49.15263899 ,-49.15289129 ,-49.15470831 ,-49.15633258 ,-49.15864447
 ,-49.16111662 ,-49.16192669 ,-49.16276395 ,-49.16414056 ,-49.16596622
 ,-49.16626211 ,-49.16887182 ,-49.16912709 ,-49.1691719  ,-49.16978322
 ,-49.16992115 ,-49.17247068 ,-49.17699319 ,-49.17886733 ,-49.18051792
 ,-49.18639461 ,-49.18717397 ,-49.19152781 ,-49.19365615 ,-49.19496205
 ,-49.19558255 ,-49.19965323 ,-49.20261153 ,-49.20489998 ,-49.20578082
 ,-49.20675585 ,-49.20773613 ,-49.20909871 ,-49.20936153 ,-49.20944409
 ,-49.21030366 ,-49.21291707 ,-49.21431675 ,-49.21628712 ,-49.21706816
 ,-49.22007937 ,-49.22058803 ,-49.22067114 ,-49.22145821 ,-49.22349736
 ,-49.22384721 ,-49.22424669 ,-49.2242774  ,-49.22501925 ,-49.22563143
 ,-49.22633187 ,-49.22757139 ,-49.22790667 ,-49.22803938 ,-49.22818797
 ,-49.22835955 ,-49.22840958 ,-49.22929568 ,-49.23094091 ,-49.23157529
 ,-49.23277658 ,-49.23328382 ,-49.23446302 ,-49.23617483 ,-49.23644596
 ,-49.23672072 ,-49.23737897 ,-49.23945669 ,-49.24388818 ,-49.24501681
 ,-49.24509164 ,-49.24571202 ,-49.24572912 ,-49.24842889 ,-49.25455594
 ,-49.25943922 ,-49.26110303 ,-49.26188742 ,-49.31314377 ,-49.49929963
 ,-50.32003018 ,-55.23258627 ,-61.06585079 ,-73.3682599  ])

all_lst.t120 = np.array([-48.10285206 ,-48.22010055 ,-48.23394425 ,-48.32719104 ,-48.35999667
 ,-48.45292499 ,-48.51633974 ,-48.51650431 ,-48.52553414 ,-48.55333496
 ,-48.55984724 ,-48.56351578 ,-48.63993474 ,-48.7717188  ,-48.80565573
 ,-48.84310556 ,-48.85747233 ,-48.87176364 ,-48.8816917  ,-48.89994755
 ,-48.90013222 ,-48.90146189 ,-48.92003548 ,-48.9335121  ,-48.94189682
 ,-48.97667777 ,-48.99612875 ,-49.00004202 ,-49.00409319 ,-49.0149317
 ,-49.01665054 ,-49.02408574 ,-49.04216821 ,-49.04564249 ,-49.04932949
 ,-49.05359787 ,-49.06125994 ,-49.06741506 ,-49.06835555 ,-49.06948144
 ,-49.08798505 ,-49.09018551 ,-49.09079143 ,-49.09835258 ,-49.09895941
 ,-49.09991642 ,-49.10339967 ,-49.11068073 ,-49.11471586 ,-49.11741077
 ,-49.12288861 ,-49.12340979 ,-49.12924017 ,-49.13731286 ,-49.13753309
 ,-49.13982492 ,-49.14192006 ,-49.14367023 ,-49.14776103 ,-49.15218837
 ,-49.15662326 ,-49.15712267 ,-49.15955597 ,-49.16800881 ,-49.1692014
 ,-49.16934898 ,-49.17294844 ,-49.17485718 ,-49.17991246 ,-49.17999466
 ,-49.18322405 ,-49.18897749 ,-49.19397386 ,-49.19427465 ,-49.19477131
 ,-49.19748807 ,-49.19779109 ,-49.19794022 ,-49.2012483  ,-49.20213527
 ,-49.2042025  ,-49.20540434 ,-49.20695897 ,-49.20754757 ,-49.20770158
 ,-49.2103126  ,-49.21190958 ,-49.21255904 ,-49.21320382 ,-49.21330815
 ,-49.21423611 ,-49.21446529 ,-49.21563189 ,-49.21684697 ,-49.21700735
 ,-49.21739623 ,-49.21746146 ,-49.21771524 ,-49.21777798 ,-49.2182098
 ,-49.21874432 ,-49.2191647  ,-49.21978462 ,-49.22103838 ,-49.22124729
 ,-49.22339266 ,-49.22397806 ,-49.22406709 ,-49.22500277 ,-49.22593845
 ,-49.22652754 ,-49.22708545 ,-49.22714232 ,-49.22764752 ,-49.22772282
 ,-49.22802653 ,-49.22846181 ,-49.22875379 ,-49.22884901 ,-49.22902075
 ,-49.22974409 ,-49.23067782 ,-49.23070703 ,-49.23203299 ,-49.2324303
 ,-49.23316817 ,-49.23342964 ,-49.23365019 ,-49.23382648 ,-49.23396891
 ,-49.23433581 ,-49.23590342 ,-49.23647329 ,-49.23674937 ,-49.23762248
 ,-49.23776623 ,-49.2379585  ,-49.23868925 ,-49.23905805 ,-49.23915849
 ,-49.23917387 ,-49.23924706 ,-49.23989864 ,-49.24007357 ,-49.24028245
 ,-49.2406285  ,-49.24073917 ,-49.24149814 ,-49.24176392 ,-49.24176691
 ,-49.24182417 ,-49.24315964 ,-49.2436109  ,-49.24369267 ,-49.24404175
 ,-49.24411155 ,-49.24463186 ,-49.24520676 ,-49.2460383  ,-49.24611814
 ,-49.24693866 ,-49.24727415 ,-49.24729784 ,-49.24740316])

all_lst.t240 = np.array([-48.54663762 ,-48.57544298 ,-48.80845918 ,-49.04766039 ,-49.09145641
 ,-49.10960653 ,-49.12237376 ,-49.12993931 ,-49.14060201 ,-49.16859172
 ,-49.19177159 ,-49.1924962  ,-49.20594529 ,-49.21073577 ,-49.21198734
 ,-49.21369561 ,-49.21583484 ,-49.21794823 ,-49.22013094 ,-49.22668377
 ,-49.23177892 ,-49.23216421 ,-49.23339797 ,-49.23371153 ,-49.23393404
 ,-49.23877986 ,-49.23912348 ,-49.24106175 ,-49.24192504 ,-49.24209042
 ,-49.24218886 ,-49.24241188 ,-49.24277905 ,-49.24288019 ,-49.24468289
 ,-49.24485527 ,-49.24527615 ,-49.24536437 ,-49.24752941])
 


idx = 0 # index for plots
for  maxtime in  time_list:
    print('\n\n\n'+ maxtime + '  start!')
    idx+=1

    F_lst = getattr(all_lst, maxtime) 

    sorted_F = np.array(F_lst)
  
    arr_len = sorted_F.shape[0]
    
    if maxtime == 't240':
        plt.plot( np.arange(0,total,total/arr_len),sorted_F,color = colors[idx], marker = markers[idx], linestyle = '-',label= maxtime)
    else:
        plt.plot(np.arange(arr_len),sorted_F,color = colors[idx], marker = markers[idx], linestyle = '-',label= maxtime)

    # plt.plot(np.arange(arr_len),sorted_MF,'go-',label='sorted_pygranso_sol_MF')

ana_sol = torch.trace(U.T@A@U).item()
plt.plot(np.arange(total),np.array(total*[-ana_sol]),color = colors[idx+1], linestyle = '-',label='analytical_sol')
plt.legend()
plt.ylim((-49.7,-47.2))

# plt.show()


png_title =  "png/time_compare_" + date_time + name_str


plt.title(name_str)
plt.xlabel('sorted sample index')
plt.ylabel('obj_val')
plt.savefig(os.path.join(my_path, png_title))